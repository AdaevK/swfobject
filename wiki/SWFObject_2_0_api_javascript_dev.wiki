#summary SWFObject v2.0 documentation for JavaScript developers

= SWFObject v2.0 documentation for JavaScript developers =

== SWFObject v2.0 public API

SWFObject 2.0 contains a public API that allows JavaScript developers to reuse SWFObject's internal functions and aims to deliver a complete toolset for publishing SWF's and retrieving Flash player related information.

=== `swfobject.registerObject(objectIdStr, swfVersionStr, xiSwfUrlStr)` ===

Embed Flash content and alternative content using standards compliant markup (the nested-objects method with proprietary Internet Explorer conditional comments), and use JavaScript to resolve the issues that markup alone cannot solve (also called static publishing).

This method is explained in "How to embed Flash content using standards compliant markup and use SWFFix to solve its issues? (option 1)" [ http://code.google.com/p/swfobject/wiki/SWFObject_2_0_documentation ]

=== `swfobject.embedSWF(swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj)` ===

Insert alternative content using standards compliant markup and embed Flash content with unobtrusive JavaScript (also called dynamic publishing).

This method is explained in "How to use SWFObject to dynamically embed Flash content? (option 2)" [ http://code.google.com/p/swfobject/wiki/SWFObject_2_0_documentation ]

=== `swfobject.getFlashPlayerVersion()` ===

Returns a JavaScript object containing the major version (major:Number), minor version (minor:Number) and release version (release:Number) of an installed Flash player. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".

An example:
{{{
var playerVersion = swfobject.getFlashPlayerVersion(); // returns a JavaScript object
var majorVersion = playerVersion.major; // access the major, minor and release version numbers via their respective properties
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_getflashplayerversion.html ]

=== `swfobject.hasFlashPlayerVersion(versionStr)` ===

Returns a Boolean to indicate whether or not a specific version of the Flash plugin is installed. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".

An example:
{{{
if (swfobject.hasFlashPlayerVersion("9.0.18")) {
  // has Flash
}
else {
  // no Flash
}
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_hasflashplayerversion.html ]

=== `swfobject.addLoadEvent(fn)` ===

A safe (it doesn't overwrite existing onload events) cross-browser method to execute a function on the window onload event (which will fire as soon as a web page including all of its assets are loaded). Based on a soultion by James Edwards [ http://brothercake.com/site/resources/scripts/onload/ ]

An example:
{{{
function sayHi() {
	alert("Hi!");
}
swfobject.addLoadEvent(sayHi);
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_addloadevent.html ]

=== `swfobject.addDomLoadEvent(fn)` ===

A cross-browser method to execute a function as soon as the DOM of a web page is available. This method is supported by Gecko based browsers - like Firefox -, IE, Opera9+, and, Safari. For all other browsers the method will fall back to the `addLoadEvent` method. Based on a solution by Dean Edwards [ http://dean.edwards.name/weblog/2006/06/again/ ]

An example:
{{{
function sayHi() {
	alert("Hi!");
}
swfobject.addDomLoadEvent(sayHi);
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_adddomloadevent.html ]

=== `swfobject.createSWF(attObj, parObj, el)` ===

Exposes SWFObject's internal cross-browser method to create a SWF. This 'low level' method will primarily be useful when combining it with other JavaScript libraries:
  * `attObj` is a JavaScript Object that contains the name value pairs of the `object` element's attributes and values, as explained in [ http://code.google.com/p/swfobject/wiki/SWFObject_2_0_documentation ]
  * `parObj` is a JavaScript Object that contains the name value pairs of the `object` element's nested `param` element's names and values, as explained in [ http://code.google.com/p/swfobject/wiki/SWFObject_2_0_documentation ]
  * `el` is the HTML element that you want to have replaced by your SWF content
  
 *NOTE:* You should only call this function as soon as the DOM of a web page is available or on the window onload event
  
Don't specify the following attributes:
  * `classid:"D27CDB6E-AE6D-11cf-96B8-444553540000"` (SWFObject publishes this automatically for Internet Explorer on Windows)
  * `type:"application/x-shockwave-flash"` (SWFObject publishes this automatically for all browsers except Internet Explorer on Windows)
  * `codebase:"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"` (deprecated)
  
Don't specify the following `param` element:
  * `movie` (use the `object` element's `data` attribute instead, SWFObject publishes this automatically for Internet Explorer on Windows)

An example:
{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>SWFObject v2.0 - low level dynamic publishing example</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <script type="text/javascript" src="swfobject.js"></script>
    <script type="text/javascript">
    if (swfobject.hasFlashPlayerVersion("6.0.0")) {
      var fn = function() {
        var att = { data:"test.swf", width:"780", height:"400" };
        var par = { flashvars:"foo=bar" };
        var el = document.getElementById("replaceMe");
        swfobject.createSWF(att, par, el);
      };
      swfobject.addDomLoadEvent(fn);
    }
    </script>
  </head>
  <body>
    <div id="replaceMe">Alternative content</div>
  </body>
</html>
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_createswf.html ]

=== `swfobject.createCSS(selStr, declStr)` ===

Exposes SWFObject's internal cross-browser method to create a dynamic stylesheet (for media type `screen` only). It's most important feature is that it can be called before the DOM of a page is loaded. Based on a solution by Bobby van der Sluis [ http://www.bobbyvandersluis.com/articles/dynamicCSS.php ]:
  * `selStr` is a String value that represents a CSS selector
  * `declStr` is a String value that represents a CSS declaration
 
An example:
{{{
if (swfobject.hasFlashPlayerVersion("6.0.0")) {
  // Overwrite regular CSS used for alternative content to enable Full Browser Flash
  swfobject.createCSS("html", "height:100%;");
  swfobject.createCSS("body", "margin:0; padding:0; overflow:hidden; height:100%;");
  swfobject.createCSS("#container", "height:100%;");
}
}}}

Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_createcss.html ]

== How can you reference the active object element with JavaScript (using option 1 or static publishing)? ==

One of the side-effects of the nested-objects approach is that per SWF there are two object elements available in the HTML code, however you can only use one id or name attribute, because these have to be unique within a web page.

The following browsers map to the following active object element:
  * Internet Explorer on Windows only sees the outer object, because the nested object is commented out by conditional comments
  * Both Opera and Safari support the notation for the outer object (Reference: [ http://www.swffix.org/testsuite/ ], row: object ActiveX)
  * Firefox, Mozilla and all other Gecko based browsers use the inner object 

You can reference the active object element by:
  # Only add the id or name attribute to the outer object tag
  # Use the following code to reference the correct object:

{{{
var obj = document.getElementById("myId");
var nestedObj = obj.getElementsByTagName("object")[0];
var ref = false;
if (obj) {
  if (!nestedObj || (nestedObj && typeof obj.SetVariable != "undefined")) {
    ref = obj;
  }
  else if (typeof nestedObj.SetVariable != "undefined") {
    ref = nestedObj;
  }
}
if (ref) {
  ref.doSomething(); // e.g. an external interface call
}
}}}