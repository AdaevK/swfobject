#summary SWFObject JavaScript API documentation
#labels Featured

== SWFObject JavaScript API documentation ==

SWFObject 2 contains an API that allows JavaScript developers to reuse SWFObject's internal functions and aims to deliver a complete tool set for publishing SWF's and retrieving Flash player related information.

=== `swfobject.registerObject(objectIdStr, swfVersionStr, xiSwfUrlStr)` ===

 Embed Flash content and alternative content using standards compliant markup (the nested-objects method with proprietary Internet Explorer conditional comments), and use JavaScript to resolve the issues that markup alone cannot solve (also called static publishing).

 This method is explained in "How to embed Flash Player content using SWFObject static publishing" [ http://code.google.com/p/swfobject/wiki/documentation ]

=== `swfobject.getObjectById(objectIdStr)` ===

 NOTE: *For static publishing only* (or: when using `swfobject.registerObject()` only)

 Returns the active object element. One of the side-effects of the nested-objects approach is that per SWF there are two object elements available in the HTML code, however you can only use one id or name attribute, because these have to be unique within a web page.

 The following browsers map to the following active object element:
  * Internet Explorer on Windows only sees the outer object, because the nested object is commented out by conditional comments
  * Both Opera and Safari support the notation for the outer object (Reference: [ http://www.swffix.org/testsuite/ ], row: object ActiveX)
  * Firefox, Mozilla and all other Gecko based browsers use the inner object 

 You can reference the active object element by:
  # Add an id to the outer object element
  # Use the `swfobject.getObjectById()` method to reference the active object element

 An example:
{{{
var obj = swfobject.getObjectById("myId");
if (obj) {
  obj.doSomething(); // e.g. an external interface call
}
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_com.html ]

=== `swfobject.embedSWF(swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj)` ===

 Insert alternative content using standards compliant markup and embed Flash content with unobtrusive JavaScript (also called dynamic publishing).

 This method is explained in "How to embed Flash Player content using SWFObject dynamic publishing" [ http://code.google.com/p/swfobject/wiki/documentation ]

=== `swfobject.getFlashPlayerVersion()` ===

 Returns a JavaScript object containing the major version (major:Number), minor version (minor:Number) and release version (release:Number) of an installed Flash player. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".

 An example:
{{{
var playerVersion = swfobject.getFlashPlayerVersion(); // returns a JavaScript object
var majorVersion = playerVersion.major; // access the major, minor and release version numbers via their respective properties
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_getflashplayerversion.html ]

=== `swfobject.hasFlashPlayerVersion(versionStr)` ===

 Returns a Boolean to indicate whether or not a specific minimum version of the Flash plugin is installed. Please note that while Flash version numbers normally consist of major.minor.release.build, SWFObject only looks at the first 3 numbers, so both "WIN 9,0,18,0" (IE) or "Shockwave Flash 9 r18" (all other browsers) will translate to "9.0.18".

 An example:
{{{
if (swfobject.hasFlashPlayerVersion("9.0.18")) {
  // has Flash
}
else {
  // no Flash
}
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_hasflashplayerversion.html ]

=== `swfobject.addLoadEvent(fn)` ===

 A safe (it doesn't overwrite existing onload events) cross-browser method to execute a function on the window onload event (which will fire as soon as a web page including all of its assets are loaded). Based on a solution by James Edwards [ http://brothercake.com/site/resources/scripts/onload/ ]

 An example:
{{{
function sayHi() {
  alert("Hi!");
}
swfobject.addLoadEvent(sayHi);
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_addloadevent.html ]

=== `swfobject.addDomLoadEvent(fn)` ===

 A cross-browser method to execute a function as soon as the DOM of a web page is available. This method is supported by Gecko based browsers - like Firefox -, IE, Opera9+, and, Safari. For all other browsers the method will fall back to the `addLoadEvent` method. Based on a solution by Dean Edwards [ http://dean.edwards.name/weblog/2006/06/again/ ]

 An example:
{{{
function sayHi() {
  alert("Hi!");
}
swfobject.addDomLoadEvent(sayHi);
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_adddomloadevent.html ]

=== `swfobject.createSWF(attObj, parObj, replaceElemIdStr)` ===

 Exposes SWFObject's internal cross-browser method to create a SWF. This 'low level' method will primarily be useful when combining it with other JavaScript libraries:
  * `attObj` is a JavaScript Object that contains the name value pairs of the `object` element's attributes and values, as explained in [ http://code.google.com/p/swfobject/wiki/documentation ]
  * `parObj` is a JavaScript Object that contains the name value pairs of the `object` element's nested `param` element's names and values, as explained in [ http://code.google.com/p/swfobject/wiki/documentation ]
  * `replaceElemIdStr` is the `id` attribute of the HTML element that you want to have replaced by your SWF content
 
 Returns the newly created `object` element
  
 Note: you should only call this function when the DOM of a web page is available

 Don't specify the following attributes:
  * `classid:"D27CDB6E-AE6D-11cf-96B8-444553540000"` (SWFObject publishes this automatically for Internet Explorer on Windows)
  * `type:"application/x-shockwave-flash"` (SWFObject publishes this automatically for all browsers except Internet Explorer on Windows)
  * `codebase:"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"` (deprecated)
  
 Don't specify the following `param` element:
  * `movie` (use the `object` element's `data` attribute instead, SWFObject publishes this automatically for Internet Explorer on Windows)

 A basic example:
{{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>SWFObject - low level dynamic publishing example</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <script type="text/javascript" src="swfobject.js"></script>
    <script type="text/javascript">
    if (swfobject.hasFlashPlayerVersion("6.0.0")) {
      var fn = function() {
        var att = { data:"test.swf", width:"780", height:"400" };
        var par = { flashvars:"foo=bar" };
        var id = "replaceMe";
        var myObject = swfobject.createSWF(att, par, id);
      };
      swfobject.addDomLoadEvent(fn);
    }
    </script>
  </head>
  <body>
    <div id="replaceMe">Alternative content</div>
  </body>
</html>
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_createswf.html ]
 
 Sample page that uses the returned `object` element for browser communication: [ http://www.swffix.org/swfobject/testsuite/test_api_createswf_com.html ]
 
=== `swfobject.removeSWF(objElemIdStr)` ===

 NOTE: This method has been added in *SWFObject 2.1* and is therefore only available from SWFObject 2.1 onwards

 Removes a SWF from your web page. Is especially built to safely (only remove a SWF after it has been loaded, to avoid broken references) and completely (nullify references to avoid memory leaks) remove a SWF in Internet Explorer.  

 An example:
{{{
swfobject.removeSWF("myContent");
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite_2_1/test_api_create_remove.html ]

=== `swfobject.createCSS(selStr, declStr)` ===

 Exposes SWFObject's internal cross-browser method to create a dynamic stylesheet (for media type `screen` only). It's most important feature is that it can be called before the DOM of a page is loaded. Based on a solution by Bobby van der Sluis [ http://www.bobbyvandersluis.com/articles/dynamic_css/index.html ]:
  * `selStr` is a String value that represents a CSS selector
  * `declStr` is a String value that represents a CSS declaration
 
 An example:
{{{
if (swfobject.hasFlashPlayerVersion("6.0.0")) {
  // Overwrite regular CSS used for alternative content to enable Full Browser Flash
  swfobject.createCSS("html", "height:100%;");
  swfobject.createCSS("body", "margin:0; padding:0; overflow:hidden; height:100%;");
  swfobject.createCSS("#container", "height:100%;");
}
}}}

 Sample page: [ http://www.swffix.org/swfobject/testsuite/test_api_createcss.html ]

=== `swfobject.getQueryParamValue(paramStr)` ===

 Utility function that returns the value of the `paramStr` parameter in the URL query string or hash string. Similar functionality was already available in SWFObject 1.5 and lower.

 To secure the method from possible XSS abuse SWFObject 2.1 will encode the returned value - using the JavaScript `encodeURIComponent()` function - if the query string includes one of the following characters:
{{{
[ \ " < >. ; ]
}}}

 An example that uses the fictive URL "http://www.yoururl.com?foo=bar&abc=123" and passes the parameters from the URL query string to the SWF via flashvars:
{{{
var flashvars = {};
if (swfobject.getQueryParamValue("foo") && swfobject.getQueryParamValue("abc")) {
  flashvars.foo = swfobject.getQueryParamValue("foo");
  flashvars.abc = swfobject.getQueryParamValue("abc");
}
var params = {};
var attributes = {};
swfobject.embedSWF("myContent.swf", "altContent", "100%", "100%", "9.0.0","expressInstall.swf", flashvars, params, attributes);
}}}

== COMMENTS POLICY ==

We will try to keep this page lean and mean, because it is used by many people. For this purpose we will periodically review all comments and remove all comments that are outdated or irrelevant to this documentation page itself. 

If you have any questions/comments about SWFObject or have problems with an implementation:
  # Please make sure you have read our FAQ [ http://code.google.com/p/swfobject/wiki/faq ]
  # Use the SWFObject discussion group [ http://groups.google.com/group/swfobject ]

If you find any bugs or want to request a future enhancement, you can fill in an issue report on the SWFObject issues page [ http://code.google.com/p/swfobject/issues/list ]